local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Water.GG Beta",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading Script Please Wait.",
   LoadingSubtitle = "by zeqser",
   Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = True, -- Set this to true to use our key system
   KeySettings = {
      Title = "Water.GG",
      Subtitle = "Key System",
      Note = "https://pastebin.com/7xSZNmfT", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false , -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Water.GGontop"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "Script Loaded",
   Content = "Thanks for using my script!",
   Duration = 5,
   Image = 4483362458,
})

local MainTab = Window:CreateTab("Main", nil) 
local MainSection = MainTab:CreateSection("Camlock & Slient Aim")

local MainButton = MainTab:CreateButton({
   Name = "Camlock (C)",
   Callback = function()
      local player = game.Players.LocalPlayer
      local mouse = player:GetMouse()
      local Aiming = false
      
      function AimLock()
         local target
         local lastMagnitude = math.huge -- Start with a high value for comparison
         for _, v in pairs(game.Players:GetPlayers()) do
            if v ~= player and v.Character and v.Character.PrimaryPart then
               local charPos = v.Character.PrimaryPart.Position
               local mousePos = mouse.Hit.p
               if (charPos - mousePos).Magnitude < lastMagnitude then
                  lastMagnitude = (charPos - mousePos).Magnitude
                  target = v
               end
            end
         end
      
         if target and target.Character and target.Character.PrimaryPart then
            local charPos = target.Character.PrimaryPart.Position
            local cam = workspace.CurrentCamera
            local pos = cam.CFrame.Position
      
            -- Set the camera CFrame to aim at the target
            workspace.CurrentCamera.CFrame = CFrame.new(pos, charPos) -- Update camera orientation
         end
      end
      
      local UserInputService = game:GetService("UserInputService")
      
      -- Toggle aiming with "E"
      UserInputService.InputBegan:Connect(function(input, gameProcessed)
         if not gameProcessed and input.KeyCode == Enum.KeyCode.C then
            Aiming = not Aiming -- Toggle aiming state
         end
      end)
      
      -- Run AimLock while Aiming is true
      game:GetService("RunService").RenderStepped:Connect(function()
         if Aiming then
            AimLock()
         end
      end)
   end,
})

local MainButton = MainTab:CreateButton({
   Name = "Slient Aim (RMB/right mouse button)",
   Callback = function()
      local Camera = workspace.CurrentCamera
      local Players = game:GetService("Players")
      local RunService = game:GetService("RunService")
      local UserInputService = game:GetService("UserInputService")
      local TweenService = game:GetService("TweenService")
      local LocalPlayer = Players.LocalPlayer
      local Holding = false
      
      _G.AimbotEnabled = true
      _G.TeamCheck = false
      _G.AimPart = "Head" 
      _G.Sensitivity = 0 
      
      _G.CircleSides = 64 
      _G.CircleColor = Color3.fromRGB(255, 255, 255) 
      _G.CircleTransparency = 0.7 
      _G.CircleRadius = 125
      _G.CircleFilled = false 
      _G.CircleVisible = true 
      _G.CircleThickness = 0 
      
      local FOVCircle = Drawing.new("Circle")
      FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
      FOVCircle.Radius = _G.CircleRadius
      FOVCircle.Filled = _G.CircleFilled
      FOVCircle.Color = _G.CircleColor
      FOVCircle.Visible = _G.CircleVisible
      FOVCircle.Radius = _G.CircleRadius
      FOVCircle.Transparency = _G.CircleTransparency
      FOVCircle.NumSides = _G.CircleSides
      FOVCircle.Thickness = _G.CircleThickness
      
      local function GetClosestPlayer()
         local MaximumDistance = _G.CircleRadius
         local Target = nil
      
         for _, v in next, Players:GetPlayers() do
            if v.Name ~= LocalPlayer.Name then
               if _G.TeamCheck == true then
                  if v.Team ~= LocalPlayer.Team then
                     if v.Character ~= nil then
                        if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                           if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
                              local ScreenPoint = Camera:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
                              local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                              
                              if VectorDistance < MaximumDistance then
                                 Target = v
                              end
                           end
                        end
                     end
                  end
               else
                  if v.Character ~= nil then
                     if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                        if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
                           local ScreenPoint = Camera:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
                           local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                           
                           if VectorDistance < MaximumDistance then
                              Target = v
                           end
                        end
                     end
                  end
               end
            end
         end
      
         return Target
      end
      
      UserInputService.InputBegan:Connect(function(Input)
          if Input.UserInputType == Enum.UserInputType.MouseButton2 then
              Holding = true
          end
      end)
      
      UserInputService.InputEnded:Connect(function(Input)
          if Input.UserInputType == Enum.UserInputType.MouseButton2 then
              Holding = false
          end
      end)
      
      RunService.RenderStepped:Connect(function()
          FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
          FOVCircle.Radius = _G.CircleRadius
          FOVCircle.Filled = _G.CircleFilled
          FOVCircle.Color = _G.CircleColor
          FOVCircle.Visible = _G.CircleVisible
          FOVCircle.Radius = _G.CircleRadius
          FOVCircle.Transparency = _G.CircleTransparency
          FOVCircle.NumSides = _G.CircleSides
          FOVCircle.Thickness = _G.CircleThickness
      
          if Holding == true and _G.AimbotEnabled == true then
              TweenService:Create(Camera, TweenInfo.new(_G.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, GetClosestPlayer().Character[_G.AimPart].Position)}):Play()
          end
      end)
   end,
})

local MainSection = MainTab:CreateSection("Strafe")

local MainButton = MainTab:CreateButton({
   Name = "Strafe (Z)",
   Callback = function()
      local player = game.Players.LocalPlayer
      local UserInputService = game:GetService("UserInputService")
      local RunService = game:GetService("RunService")
      local Camera = workspace.CurrentCamera
      
      local orbiting = false
      local orbitSpeed = 500
      local orbitRadius = 10
      local rotationAngle = 0
      local targetPlayer = nil
   
      local function getClosestPlayerToCursor()
         local mouseLocation = UserInputService:GetMouseLocation()
         local closestPlayer = nil
         local closestDistance = math.huge
      
         for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
               local hrp = otherPlayer.Character.HumanoidRootPart
               local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
               if onScreen then
                  local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).Magnitude
                  if dist < closestDistance then
                     closestDistance = dist
                     closestPlayer = otherPlayer
                  end
               end
            end
         end
      
         return closestPlayer
      end
      
      UserInputService.InputBegan:Connect(function(input, gameProcessed)
         if gameProcessed then return end
      
         if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Z then
            if orbiting then
               orbiting = false
               targetPlayer = nil
               print("Stopped orbiting")
            else
               local nearest = getClosestPlayerToCursor()
               if nearest then
                  targetPlayer = nearest
                  orbiting = true
                  print("Now orbiting:", targetPlayer.Name)
               else
                  warn("No player found to orbit.")
               end
            end
         end
      end)
      
      RunService.Heartbeat:Connect(function(dt)
         if orbiting and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPos = targetPlayer.Character.HumanoidRootPart.Position
            local myHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if myHRP then
               rotationAngle += orbitSpeed * dt
               if rotationAngle >= 360 then
                  rotationAngle -= 360
               end
      
               local x = math.cos(math.rad(rotationAngle)) * orbitRadius
               local z = math.sin(math.rad(rotationAngle)) * orbitRadius
               local newPosition = targetPos + Vector3.new(x, 0, z)
      
               myHRP.CFrame = CFrame.new(newPosition, targetPos)
            end
         end
      end)
      
   end,
})

local MainSection = MainTab:CreateSection("Coming soon")

local PlayerTab = Window:CreateTab("Player", nil) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("Player")

local PlayerButton = PlayerTab:CreateButton({
   Name = "fly (f)",
   Callback = function()
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local runService = game:GetService("RunService")
      local userInputService = game:GetService("UserInputService")
      
      local flying = false
      local speed = 700
      local camera = workspace.CurrentCamera
      
      -- Set up BodyGyro and BodyVelocity
      local function createFlyObjects(rootPart)
         local bodyGyro = Instance.new("BodyGyro")
         bodyGyro.P = 9e4
         bodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
         bodyGyro.cframe = rootPart.CFrame
         bodyGyro.Name = "FlyGyro"
         bodyGyro.Parent = rootPart
      
         local bodyVelocity = Instance.new("BodyVelocity")
         bodyVelocity.velocity = Vector3.zero
         bodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
         bodyVelocity.Name = "FlyVelocity"
         bodyVelocity.Parent = rootPart
      
         return bodyGyro, bodyVelocity
      end
      
      local function toggleFly()
         flying = not flying
         local rootPart = character:WaitForChild("HumanoidRootPart")
      
         if flying then
            local gyro, velocity = createFlyObjects(rootPart)
      
            runService:BindToRenderStep("Fly", Enum.RenderPriority.Character.Value, function()
               local direction = Vector3.zero
      
               if userInputService:IsKeyDown(Enum.KeyCode.W) then
                  direction += camera.CFrame.LookVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.S) then
                  direction -= camera.CFrame.LookVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.A) then
                  direction -= camera.CFrame.RightVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.D) then
                  direction += camera.CFrame.RightVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                  direction += camera.CFrame.UpVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                  direction -= camera.CFrame.UpVector
               end
      
               velocity.velocity = direction.Unit * speed
               if direction == Vector3.zero then
                  velocity.velocity = Vector3.zero
               end
      
               gyro.CFrame = CFrame.new(Vector3.zero, camera.CFrame.LookVector)
            end)
         else
            runService:UnbindFromRenderStep("Fly")
            local gyro = rootPart:FindFirstChild("FlyGyro")
            local velocity = rootPart:FindFirstChild("FlyVelocity")
            if gyro then gyro:Destroy() end
            if velocity then velocity:Destroy() end
         end
      end
      
      -- Toggle fly with "F"
      userInputService.InputBegan:Connect(function(input, processed)
         if processed then return end
         if input.KeyCode == Enum.KeyCode.F then
            toggleFly()
         end
      end)
      
      -- Ensure character reference updates on respawn
      player.CharacterAdded:Connect(function(char)
         character = char
      end)
      
   end,
})
