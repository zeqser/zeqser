local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
   -- Set Center to true if you want the menu to appear in the center
   -- Set AutoShow to true if you want the menu to appear when it is created
   -- Position and Size are also valid options here
   -- but you do not need to define them unless you are changing them :)

   Title = 'Water.GG',
   Center = true,
   AutoShow = true,
   TabPadding = 8,
   MenuFadeTime = 0.2
})

local Tabs = {
   -- Creates a new tab titled Main
   Main = Window:AddTab('Main'),
   ['UI Settings'] = Window:AddTab('UI Settings'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('CamLock & Slient aim')

LeftGroupBox:AddToggle('CamLock', {
   Text = 'CamLock (C)',
   Default = false, -- Default value (true / false)
   Tooltip = '', -- Information shown when you hover over the toggle
   Callback = function(Value)
      local Players = game:GetService("Players")
      local UserInputService = game:GetService("UserInputService")
      local RunService = game:GetService("RunService")
      
      local player = Players.LocalPlayer
      local camera = workspace.CurrentCamera
      local mouse = player:GetMouse()
      
      local isLockedOn = false
      local currentTarget = nil
      local lockRadiusOnScreen = 100 -- how close the cursor needs to be (in pixels)
      
      -- Get screen distance between mouse and a part
      local function getScreenDistanceTo(part)
         local screenPos, onScreen = camera:WorldToViewportPoint(part.Position)
         if onScreen then
            local mousePos = Vector2.new(mouse.X, mouse.Y)
            local partScreenPos = Vector2.new(screenPos.X, screenPos.Y)
            return (mousePos - partScreenPos).Magnitude
         end
         return math.huge
      end
      
      -- Find the closest character to the cursor
      local function getTargetNearCursor()
         local closestTarget = nil
         local closestDist = math.huge
      
         for _, otherPlayer in ipairs(Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
               local dist = getScreenDistanceTo(otherPlayer.Character.HumanoidRootPart)
               if dist < lockRadiusOnScreen and dist < closestDist then
                  closestDist = dist
                  closestTarget = otherPlayer
               end
            end
         end
      
         return closestTarget
      end
      
      -- Toggle lock on/off with C key
      UserInputService.InputBegan:Connect(function(input, gameProcessed)
         if gameProcessed then return end
         if input.KeyCode == Enum.KeyCode.C then
            if isLockedOn then
               -- Unlock
               isLockedOn = false
               currentTarget = nil
            else
               -- Lock onto target under cursor
               local target = getTargetNearCursor()
               if target then
                  currentTarget = target
                  isLockedOn = true
               end
            end
         end
      end)
      
      -- Optional: Keep camera looking at the target (can be removed if not needed)
      RunService.RenderStepped:Connect(function()
         if isLockedOn and currentTarget and currentTarget.Character and currentTarget.Character:FindFirstChild("HumanoidRootPart") then
            local targetPart = currentTarget.Character.HumanoidRootPart
            camera.CFrame = CFrame.new(camera.CFrame.Position, targetPart.Position)
         end
      end)  
      
   end
})

LeftGroupBox:AddToggle('Slient Aim', {
   Text = 'Slient aim',
   Default = false, -- Default value (true / false)
   Tooltip = 'Slient aim', -- Information shown when you hover over the toggle

   Callback = function(Value)
      local Camera = workspace.CurrentCamera
      local Players = game:GetService("Players")
      local RunService = game:GetService("RunService")
      local UserInputService = game:GetService("UserInputService")
      local TweenService = game:GetService("TweenService")
      local LocalPlayer = Players.LocalPlayer
      local Holding = false
      
      _G.AimbotEnabled = true
      _G.TeamCheck = false
      _G.AimPart = "Head" 
      _G.Sensitivity = 0 
      
      _G.CircleSides = 64 
      _G.CircleColor = Color3.fromRGB(255, 255, 255) 
      _G.CircleTransparency = 0.7 
      _G.CircleRadius = 125
      _G.CircleFilled = false 
      _G.CircleVisible = true 
      _G.CircleThickness = 0 
      
      local FOVCircle = Drawing.new("Circle")
      FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
      FOVCircle.Radius = _G.CircleRadius
      FOVCircle.Filled = _G.CircleFilled
      FOVCircle.Color = _G.CircleColor
      FOVCircle.Visible = _G.CircleVisible
      FOVCircle.Radius = _G.CircleRadius
      FOVCircle.Transparency = _G.CircleTransparency
      FOVCircle.NumSides = _G.CircleSides
      FOVCircle.Thickness = _G.CircleThickness
      
      local function GetClosestPlayer()
         local MaximumDistance = _G.CircleRadius
         local Target = nil
      
         for _, v in next, Players:GetPlayers() do
            if v.Name ~= LocalPlayer.Name then
               if _G.TeamCheck == true then
                  if v.Team ~= LocalPlayer.Team then
                     if v.Character ~= nil then
                        if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                           if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
                              local ScreenPoint = Camera:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
                              local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                              
                              if VectorDistance < MaximumDistance then
                                 Target = v
                              end
                           end
                        end
                     end
                  end
               else
                  if v.Character ~= nil then
                     if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
                        if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
                           local ScreenPoint = Camera:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
                           local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
                           
                           if VectorDistance < MaximumDistance then
                              Target = v
                           end
                        end
                     end
                  end
               end
            end
         end
      
         return Target
      end
      
      UserInputService.InputBegan:Connect(function(Input)
         if Input.UserInputType == Enum.UserInputType.MouseButton2 then
            Holding = true
         end
      end)
      
      UserInputService.InputEnded:Connect(function(Input)
         if Input.UserInputType == Enum.UserInputType.MouseButton2 then
            Holding = false
         end
      end)
      
      RunService.RenderStepped:Connect(function()
         FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
         FOVCircle.Radius = _G.CircleRadius
         FOVCircle.Filled = _G.CircleFilled
         FOVCircle.Color = _G.CircleColor
         FOVCircle.Visible = _G.CircleVisible
         FOVCircle.Radius = _G.CircleRadius
         FOVCircle.Transparency = _G.CircleTransparency
         FOVCircle.NumSides = _G.CircleSides
         FOVCircle.Thickness = _G.CircleThickness
      
         if Holding == true and _G.AimbotEnabled == true then
            TweenService:Create(Camera, TweenInfo.new(_G.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, GetClosestPlayer().Character[_G.AimPart].Position)}):Play()
         end
      end)
   end
})

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Strafe')

LeftGroupBox:AddToggle('Strafe', {
   Text = 'Strafe (Z)',
   Default = false, -- Default value (true / false)
   Tooltip = 'Strafe', -- Information shown when you hover over the toggle

   Callback = function(Value)
      local player = game.Players.LocalPlayer
      local UserInputService = game:GetService("UserInputService")
      local RunService = game:GetService("RunService")
      local Camera = workspace.CurrentCamera
      
      local orbiting = false
      local orbitSpeed = 800
      local orbitRadius = 10
      local rotationAngle = 0
      local targetPlayer = nil
   
      local function getClosestPlayerToCursor()
         local mouseLocation = UserInputService:GetMouseLocation()
         local closestPlayer = nil
         local closestDistance = math.huge
      
         for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
               local hrp = otherPlayer.Character.HumanoidRootPart
               local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
               if onScreen then
                  local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).Magnitude
                  if dist < closestDistance then
                     closestDistance = dist
                     closestPlayer = otherPlayer
                  end
               end
            end
         end
      
         return closestPlayer
      end
      
      UserInputService.InputBegan:Connect(function(input, gameProcessed)
         if gameProcessed then return end
      
         if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Z then
            if orbiting then
               orbiting = false
               targetPlayer = nil
               print("Stopped orbiting")
            else
               local nearest = getClosestPlayerToCursor()
               if nearest then
                  targetPlayer = nearest
                  orbiting = true
                  print("Now orbiting:", targetPlayer.Name)
               else
                  warn("No player found to orbit.")
               end
            end
         end
      end)
      
      RunService.Heartbeat:Connect(function(dt)
         if orbiting and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPos = targetPlayer.Character.HumanoidRootPart.Position
            local myHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if myHRP then
               rotationAngle += orbitSpeed * dt
               if rotationAngle >= 360 then
                  rotationAngle -= 360
               end
      
               local x = math.cos(math.rad(rotationAngle)) * orbitRadius
               local z = math.sin(math.rad(rotationAngle)) * orbitRadius
               local newPosition = targetPos + Vector3.new(x, 0, z)
      
               myHRP.CFrame = CFrame.new(newPosition, targetPos)
            end
         end
      end)
   end
})

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('Fly', {
   Text = 'Fly (f)',
   Default = false, -- Default value (true / false)
   Tooltip = '', -- Information shown when you hover over the toggle

   Callback = function(Value)
      local player = game.Players.LocalPlayer
      local character = player.Character or player.CharacterAdded:Wait()
      local runService = game:GetService("RunService")
      local userInputService = game:GetService("UserInputService")
      
      local flying = false
      local speed = 700
      local camera = workspace.CurrentCamera
      
      -- Set up BodyGyro and BodyVelocity
      local function createFlyObjects(rootPart)
         local bodyGyro = Instance.new("BodyGyro")
         bodyGyro.P = 9e4
         bodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
         bodyGyro.cframe = rootPart.CFrame
         bodyGyro.Name = "FlyGyro"
         bodyGyro.Parent = rootPart
      
         local bodyVelocity = Instance.new("BodyVelocity")
         bodyVelocity.velocity = Vector3.zero
         bodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)
         bodyVelocity.Name = "FlyVelocity"
         bodyVelocity.Parent = rootPart
      
         return bodyGyro, bodyVelocity
      end
      
      local  function toggleFly()
         flying = not flying
         local rootPart = character:WaitForChild("HumanoidRootPart")
      
         if flying then
            local gyro, velocity = createFlyObjects(rootPart)
      
            runService:BindToRenderStep("Fly", Enum.RenderPriority.Character.Value, function()
               local direction = Vector3.zero
      
               if userInputService:IsKeyDown(Enum.KeyCode.W) then
                  direction += camera.CFrame.LookVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.S) then
                  direction -= camera.CFrame.LookVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.A) then
                  direction -= camera.CFrame.RightVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.D) then
                  direction += camera.CFrame.RightVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                  direction += camera.CFrame.UpVector
               end
               if userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                  direction -= camera.CFrame.UpVector
               end
      
               velocity.velocity = direction.Unit * speed
               if direction == Vector3.zero then
                  velocity.velocity = Vector3.zero
               end
      
               gyro.CFrame = CFrame.new(Vector3.zero, camera.CFrame.LookVector)
            end)
         else
            runService:UnbindFromRenderStep("Fly")
            local gyro = rootPart:FindFirstChild("FlyGyro")
            local velocity = rootPart:FindFirstChild("FlyVelocity")
            if gyro then gyro:Destroy() end
            if velocity then velocity:Destroy() end
         end
      end
      
      -- Toggle fly with "F"
      userInputService.InputBegan:Connect(function(input, processed)
         if processed then return end
         if input.KeyCode == Enum.KeyCode.F then
            toggleFly()
         end
      end)
      
      -- Ensure character reference updates on respawn
      player.CharacterAdded:Connect(function(char)
         character = char
      end)
   end
})
   Callback = function(Value)
       print('[cb] MyToggle changed to:', Value)
   end
LeftGroupBox:AddToggle('ESP', {
   Text = 'ESP (H)',
   Default = false, -- Default value (true / false)
   Tooltip = '', -- Information shown when you hover over the toggle

   Callback = function(Value)
      local Players = game:GetService("Players")
      local RunService = game:GetService("RunService")
      local UserInputService = game:GetService("UserInputService")
      local camera = workspace.CurrentCamera
      local localPlayer = Players.LocalPlayer
      
      local ESP_ENABLED = true
      local tracers = {}
      local boxes = {}
      local nameTags = {}
      
      -- Keybind toggle
      UserInputService.InputBegan:Connect(function(input, gameProcessed)
         if not gameProcessed and input.KeyCode == Enum.KeyCode.H then
            ESP_ENABLED = not ESP_ENABLED
            if not ESP_ENABLED then
               -- Hide all
               for _, lines in pairs(tracers) do
                  lines.Outline.Visible = false
                  lines.Line.Visible = false
               end
               for _, box in pairs(boxes) do
                  for _, line in pairs(box) do
                     line.Visible = false
                  end
               end
               for _, text in pairs(nameTags) do
                  text.Visible = false
               end
            end
         end
      end)
      
      -- Drawing helpers
      local function createLine(color, thickness)
         local line = Drawing.new("Line")
         line.Visible = true
         line.Color = color
         line.Thickness = thickness
         line.Transparency = 1
         return line
      end
      
      local function createBox()
         local box = {}
         for i = 1, 4 do
            local line = Drawing.new("Line")
            line.Visible = true
            line.Color = Color3.new(1, 1, 1)
            line.Thickness = 2
            line.Transparency = 1
            box[i] = line
         end
         return box
      end
      
      local function createText()
         local tag = Drawing.new("Text")
         tag.Size = 13
         tag.Center = true
         tag.Outline = true
         tag.OutlineColor = Color3.new(0, 0, 0)
         tag.Color = Color3.new(1, 1, 1)
         tag.Visible = true
         tag.Transparency = 1
         return tag
      end
      
      -- ESP Render Loop
      RunService.RenderStepped:Connect(function()
         if not ESP_ENABLED then return end
      
         for _, player in ipairs(Players:GetPlayers()) do
            if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
               local hrp = player.Character.HumanoidRootPart
               local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
      
               if onScreen then
                  -- Tracers
                  if not tracers[player] then
                     tracers[player] = {
                        Outline = createLine(Color3.new(0, 0, 0), 3),
                        Line = createLine(Color3.new(1, 1, 1), 1.5)
                     }
                  end
      
                  local lineStart = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                  local lineEnd = Vector2.new(screenPos.X, screenPos.Y)
      
                  tracers[player].Outline.From = lineStart
                  tracers[player].Outline.To = lineEnd
                  tracers[player].Line.From = lineStart
                  tracers[player].Line.To = lineEnd
                  tracers[player].Outline.Visible = true
                  tracers[player].Line.Visible = true
      
                  -- Boxes
                  local head = player.Character:FindFirstChild("Head")
                  if head then
                     local top = camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))
                     local bottom = camera:WorldToViewportPoint(hrp.Position - Vector3.new(0, 3, 0))
                     local height = math.abs(top.Y - bottom.Y)
                     local width = height / 2
      
                     if not boxes[player] then
                        boxes[player] = createBox()
                     end
      
                     local tl = Vector2.new(screenPos.X - width / 2, top.Y)
                     local tr = Vector2.new(screenPos.X + width / 2, top.Y)
                     local bl = Vector2.new(screenPos.X - width / 2, bottom.Y)
                     local br = Vector2.new(screenPos.X + width / 2, bottom.Y)
      
                     local boxLines = boxes[player]
                     boxLines[1].From, boxLines[1].To = tl, tr
                     boxLines[2].From, boxLines[2].To = tr, br
                     boxLines[3].From, boxLines[3].To = br, bl
                     boxLines[4].From, boxLines[4].To = bl, tl
      
                     for _, line in pairs(boxLines) do
                        line.Visible = true
                     end
      
                     -- Username only
                     if not nameTags[player] then
                        nameTags[player] = createText()
                     end
      
                     local tag = nameTags[player]
                     tag.Position = Vector2.new(screenPos.X, top.Y - 15)
                     tag.Text = player.Name
                     tag.Visible = true
                  end
               else
                  -- Hide off-screen
                  if tracers[player] then
                     tracers[player].Outline.Visible = false
                     tracers[player].Line.Visible = false
                  end
                  if boxes[player] then
                     for _, line in pairs(boxes[player]) do
                        line.Visible = false
                     end
                  end
                  if nameTags[player] then
                     nameTags[player].Visible = false
                  end
               end
            end
         end
      end)
      
   end
})
